O JDBC é muito verboso e a API é meio estranha de usar, sem contar que gera um alto acoplamento do nosso código com o banco de dados, de forma que temos que fazer alterações em todo o nosso código quando alguma tabela mudar de nome ou algo do tipo.

A JPA, assim como o Hibernate, foram criados para serem usados no lugar do JDBC quando integramos nossos sistemas com o banco de dados, assim simplificando esses processos.

============Hibernate============

É uma biblioteca de mercado (não oficial do Java) que surgiu como uma tentativa de substituir o JDBC puro, assim como o EJB2, e ganhou muita popularidade devido à sua maior facilidade de trabalhar com bancos de dados utilizando um ORM.

============JPA============

A JPA é uma especificação que surgiu para padronizar o ORM no mundo Java, de forma que se as bibliotecas que implementam o ORM (Hibernate ou outras) fossem trocadas no projeto, apenas configurações teriam que ser mudadas, não o código em si, funcionando de maneira similar à especificação do JDBC, que pode ser usado com vários drivers diferentes.

Essa especificação facilitou muito a vida dos desenvolvedores, fazendo com que os sistemas não ficassem dependentes de implementações.

============persistence.xml============

É o arquivo onde ficam as configurações da JPA.

Podemos fazer essas configurações em arquivos Java também, mas o mais comum é ficar no XML mesmo.

Esse arquivo deve ficar dentro da pasta "META-INF". Se for um projeto Maven, essa pasta deve estar dentro da pasta "resources".

============<persistence-unit></persistence-unit>============

É a tag que define a nossa unidade de persistência. Ela que irá armazenar todas as outras tags de configuração da JPA.

Ela fica dentro da tag "persistence", que é a tag mãe do "persistence.xml" e que é padrão.

Temos que ter uma "persistence-unit" para cada banco de dados que iremos utilizar na nossa aplicação.

Propriedades principais:

    - name:

        Aqui colocamos o nome da nossa "persistence-unit" (não precisa ser o mesmo nome do projeto).

    - transaction-type:

        Aqui especificamos o modelo de transações, podendo mudar entre "JTA", que usamos para utilizar a JTA padrão (só funciona se estivermos em um servidor de aplicação), e "RESOURCE_LOCAL", que utilizamos quando não estamos em um servidor de aplicação.

        Quando estamos trabalhando com "RESOURCE_LOCAL", nós mesmos que devemos gerenciar as transações com o banco de dados. Para fazer isso, basta utilizarmos o método "getTransaction()" do "EntityManager" e utilizarmos os métodos "begin()", "commit()", "rollback()", etc. desse objeto que pegamos.

============<properties></properties>============

É a tag onde colocamos as nossas propriedades de configuração, cada uma sendo uma tag "property".

Existem propriedade obrigatórias, como driver JDBC do banco de dados, url de acesso e etc.

Existem propriedades específicas de implementação, que na maioria dos casos, são do Hibernate, como por exemplo o dialeto do Hibernate, que precisamos definir para o Hibernate saber especificamente qual o dialeto tem que usar para o nosso banco de dados. Uma muito importante é a que define se o Hibernate deve criar, fazer update, dropar tabelas e etc. automaticamente ("hibernate.hbm2ddl.auto").

============ENTIDADES============

São as classes que fazem o mapeamento de tabelas no banco de dados.

Boa parte das annotations que adicionamos e configurações que fazemos nas entidades do Spring Data JPA funcionam da mesma forma no JPA sem o Spring, portanto não vou ficar anotando tudo, apenas coisas que eu não souber.

Importante saber que, se não estivermos utilizando o Hibernate, devemos adicionar uma tag "class" no "persistence.xml" para cada entidade que criarmos no sistema, contendo o full qualified name das classes. Se estivermos utilizando o Hibernate não precisamos fazer isso, pois ele procura as entidades automaticamente.

A JPA precisa que as entidades tenham um construtor padrão, pois ela usa esse construtor nos métodos de "SELECT" e etc.

============CARDINALIDADE============

As annotations de cardinalidade sempre se referem primeiro à entidade na qual estamos colocando a annotation.

No exemplo de "@ManyToOne", seriam muitos registros da entidade com a annotation para um registro da outra entidade.

============EntityManager============

É a interface que utilizamos para fazer toda a persistência das nossas entidades no banco de dados.

Para criarmos um EntityManager, precisamos de um "EntityManagerFactory", que será encarregado de nos retornar um EntityManager do jeito que a gente precisa quando utilizarmos o método "createEntityManager()".

Para criarmos um "EntityManagerFactory", precisamos utilizar o método estático "createEntityManagerFactory(<nome da persistence-unit>)" da classe "Persistence", que vem com o JPA. Sempre precisamos passar o nome da persistence-unit neste método.

============DAO============

Na JPA é muito comum o uso de DAOs, assim como no JDBC.

Nas nossas classes DAO é comum que façamos apenas as ações de acesso a dados das nossas entidades. Coisas como a criação de um EntityManager ou algo do tipo não são responsabilidade das classes DAO.

============CICLO DE VIDA DAS ENTIDADES============

Estados no "INSERT":

    - TRANSIENT:

        Entidades entram nesse estado quando instanciamos elas.

        A entidade em questão ainda não estará persistida, mas estará pronta para ser.

    - MANAGED:

        Entidades entram nesse estado depois de executarmos o método "persist()" do EntityManager. Isso não quer dizer que elas já foram persistidas no banco de dados, pois ainda é necessário executar o commit da transação. Quando o commit ou flush for executado, entidades "MANAGED" serão persistidas no banco.

        A JPA fica observando entidades que estão nesse estado, assim podendo capturar mudanças na entidade que ocorrerem após o método "persist()" e deixar tudo de acordo no banco de dados também, executando statements de "UPDATE" e etc.

    - DETACHED:

        Entidades entram nesse estado quando o EntityManager é fechado após a persistência dos dados ou é limpo com o método "clear()".

        Entidades nesse estado já possuem id e já estão persistidas, mas a JPA não estará mais observando mudanças na instância da entidade, assim fazendo com que qualquer mudança que façamos não afete a entidade persistida no banco de dados.

        Podemos criar uma nova referência à entidade "DETACHED" só que com o estado "MANAGED" com o método "merge()" do EntityManager, que retorna uma nova referência à entidade passado pro parâmetro, só que com o estado "MANAGED".

É interessante saber que sempre que pegamos uma entidade do banco de dados com um "find()", ela já vem no estado "MANAGED", ou seja, qualquer modificação que fizermos nela será persistida no commit.

     - REMOVED:

        Entidades nesse estado são deletadas do banco de dados após o commit/flush.

        Entidades entram nesse estado quando o método "remove(<entidade>)" do EntityManager é executado. Deleta a entidade pelo seu id.

============find(<Classe>, <Long id>)============

É um método que nos retorna um registro da entidade no banco de dados a partir do id passado por parâmetro.

============JPQL (Java Persistence Query Language)============

É uma linguagem similar ao SQL padrão, mas que funciona com a orientação a objetos. Passamo o nome da entidade em vez do nome da tabela e etc.

Usamos o JPQL com o método "createQuery()" do EntityManager, podendo passar a nossa String JPQL sozinha como parâmetro, ou passando também o tipo que esperamos como retorno como segundo parâmetro. Esse método retorna um "TypedQuery", que podemos utilizar o método "getResultList()" para obter uma lista com os resultados. Também podemos usar o método "getSingleResult()" para pegarmos um único resultado de um query.

De modo geral, a JPQL funciona do mesmo jeito que no Spring Data JPA, podendo passar parâmetros nomeados ou por índice e etc.
